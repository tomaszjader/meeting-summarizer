import openai
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import json
import os
from typing import List, Dict
import re
import pyaudio
import wave
from dotenv import load_dotenv

# Za≈Çaduj zmienne ≈õrodowiskowe z pliku .env
load_dotenv()

class MeetingSummarizer:
    def __init__(self, openai_api_key: str = None, email_config: Dict = None):
        """
        Inicjalizacja systemu Meeting Summarizer
        
        Args:
            openai_api_key: Klucz API dla OpenAI (opcjonalnie, mo≈ºna u≈ºyƒá z .env)
            email_config: Konfiguracja email (opcjonalnie, mo≈ºna u≈ºyƒá z .env)
        """
        # Inicjalizuj klienta OpenAI z nowym API
        api_key = openai_api_key or os.getenv('OPENAI_API_KEY')
        self.openai_client = openai.OpenAI(api_key=api_key)
        
        # Konfiguracja email z parametru lub z .env
        if email_config:
            self.email_config = email_config
        else:
            self.email_config = {
                'smtp_server': os.getenv('EMAIL_SMTP_SERVER', 'smtp.gmail.com'),
                'port': int(os.getenv('EMAIL_PORT', '587')),
                'username': os.getenv('EMAIL_USERNAME'),
                'password': os.getenv('EMAIL_PASSWORD')
            } if os.getenv('EMAIL_USERNAME') else {}
        
    def record_audio(self, filename: str = "meeting_audio.wav", duration: int = None):
        """
        Nagrywanie audio ze spotkania
        
        Args:
            filename: Nazwa pliku do zapisu
            duration: Czas nagrywania w sekundach (None = nagrywanie do przerwania)
        """
        print("üé§ Rozpoczynam nagrywanie spotkania...")
        
        # Konfiguracja nagrywania
        chunk = 1024
        format = pyaudio.paInt16
        channels = 1
        rate = 44100
        
        audio = pyaudio.PyAudio()
        
        stream = audio.open(
            format=format,
            channels=channels,
            rate=rate,
            input=True,
            frames_per_buffer=chunk
        )
        
        frames = []
        
        try:
            if duration:
                for _ in range(0, int(rate / chunk * duration)):
                    data = stream.read(chunk)
                    frames.append(data)
            else:
                print("Naci≈õnij Ctrl+C aby zako≈Ñczyƒá nagrywanie...")
                while True:
                    data = stream.read(chunk)
                    frames.append(data)
                    
        except KeyboardInterrupt:
            print("\nüõë Zatrzymano nagrywanie")
        
        stream.stop_stream()
        stream.close()
        audio.terminate()
        
        # Zapisz plik
        with wave.open(filename, 'wb') as wf:
            wf.setnchannels(channels)
            wf.setsampwidth(audio.get_sample_size(format))
            wf.setframerate(rate)
            wf.writeframes(b''.join(frames))
        
        print(f"‚úÖ Nagranie zapisane jako: {filename}")
        return filename



    def transcribe_audio(self, audio_file: str) -> str:
        """
        Transkrypcja u≈ºywajƒÖc OpenAI Whisper
        
        Args:
            audio_file: ≈öcie≈ºka do pliku audio
            
        Returns:
            Transkrypcja spotkania
        """
        print("ü§ñ Transkrypcja przez OpenAI Whisper...")
        
        try:
            with open(audio_file, "rb") as audio:
                transcript = self.openai_client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio,
                    language="pl"
                )
            print("‚úÖ Transkrypcja uko≈Ñczona")
            return transcript.text
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd transkrypcji OpenAI: {e}")
            return ""

    def summarize_meeting(self, transcript: str) -> Dict:
        """
        Podsumowanie spotkania u≈ºywajƒÖc GPT
        
        Args:
            transcript: Transkrypcja spotkania
            
        Returns:
            Dict z podsumowaniem, action items itp.
        """
        print("üìã Tworzƒô podsumowanie spotkania...")
        
        prompt = f"""
        Przeanalizuj poni≈ºszƒÖ transkrypcjƒô spotkania i utw√≥rz strukturalne podsumowanie:

        TRANSKRYPCJA:
        {transcript}

        Proszƒô o utworzenie podsumowania w formacie JSON zawierajƒÖcego:
        1. "summary" - g≈Ç√≥wne podsumowanie spotkania (2-3 akapity)
        2. "key_topics" - lista g≈Ç√≥wnych temat√≥w omawianych na spotkaniu
        3. "action_items" - lista konkretnych zada≈Ñ do wykonania z odpowiedzialnymi osobami
        4. "decisions" - podjƒôte decyzje
        5. "next_meeting" - informacje o nastƒôpnym spotkaniu (je≈õli wspomniano)
        6. "participants" - lista uczestnik√≥w (je≈õli mo≈ºna wyciƒÖgnƒÖƒá z transkrypcji)

        Odpowiedz tylko w formacie JSON, bez dodatkowego tekstu.
        """

        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3
            )
            
            # Parsuj JSON z odpowiedzi
            summary_json = json.loads(response.choices[0].message.content)
            print("‚úÖ Podsumowanie utworzone")
            return summary_json
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd tworzenia podsumowania: {e}")
            return {
                "summary": "Nie uda≈Ço siƒô utworzyƒá podsumowania",
                "key_topics": [],
                "action_items": [],
                "decisions": [],
                "next_meeting": "",
                "participants": []
            }

    def create_meeting_notes(self, meeting_data: Dict, meeting_title: str = None) -> str:
        """
        Tworzenie sformatowanych notatek ze spotkania
        
        Args:
            meeting_data: Dane podsumowania ze spotkania
            meeting_title: Tytu≈Ç spotkania
            
        Returns:
            Sformatowane notatki HTML
        """
        if not meeting_title:
            meeting_title = f"Spotkanie z dnia {datetime.now().strftime('%d.%m.%Y')}"
        
        html_notes = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>{meeting_title}</title>
            <style>
                body {{ font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }}
                h1 {{ color: #2c3e50; border-bottom: 2px solid #3498db; }}
                h2 {{ color: #34495e; margin-top: 30px; }}
                .action-item {{ background: #fff3cd; padding: 10px; margin: 5px 0; border-left: 4px solid #ffc107; }}
                .decision {{ background: #d4edda; padding: 10px; margin: 5px 0; border-left: 4px solid #28a745; }}
                ul {{ padding-left: 20px; }}
                .date {{ color: #6c757d; font-size: 0.9em; }}
            </style>
        </head>
        <body>
            <h1>{meeting_title}</h1>
            <p class="date">Data: {datetime.now().strftime('%d.%m.%Y, %H:%M')}</p>
            
            <h2>üìã Podsumowanie</h2>
            <p>{meeting_data.get('summary', 'Brak podsumowania')}</p>
            
            <h2>üéØ G≈Ç√≥wne tematy</h2>
            <ul>
                {"".join([f"<li>{topic}</li>" for topic in meeting_data.get('key_topics', [])])}
            </ul>
            
            <h2>‚úÖ Zadania do wykonania (Action Items)</h2>
            {"".join([f'<div class="action-item"><strong>üìå {item}</strong></div>' for item in meeting_data.get('action_items', [])])}
            
            <h2>üéØ Podjƒôte decyzje</h2>
            {"".join([f'<div class="decision"><strong>‚úì {decision}</strong></div>' for decision in meeting_data.get('decisions', [])])}
            
            <h2>üë• Uczestnicy</h2>
            <ul>
                {"".join([f"<li>{participant}</li>" for participant in meeting_data.get('participants', [])])}
            </ul>
            
            <h2>üìÖ Nastƒôpne spotkanie</h2>
            <p>{meeting_data.get('next_meeting', 'Nie ustalono')}</p>
            
            <hr>
            <p><small>Notatki wygenerowane automatycznie przez Meeting Summarizer</small></p>
        </body>
        </html>
        """
        
        return html_notes

    def send_email_notes(self, notes_html: str, participants_emails: List[str], 
                        subject: str = None, sender_name: str = "Meeting Summarizer"):
        """
        Wysy≈Çanie notatek uczestnikom przez email
        
        Args:
            notes_html: Notatki w formacie HTML
            participants_emails: Lista emaili uczestnik√≥w
            subject: Temat emaila
            sender_name: Nazwa nadawcy
        """
        if not self.email_config:
            print("‚ùå Brak konfiguracji email")
            return
        
        if not subject:
            subject = f"Notatki ze spotkania - {datetime.now().strftime('%d.%m.%Y')}"
        
        print(f"üìß Wysy≈Çam notatki do {len(participants_emails)} uczestnik√≥w...")
        
        try:
            # Konfiguracja serwera SMTP
            server = smtplib.SMTP(self.email_config['smtp_server'], self.email_config['port'])
            server.starttls()
            server.login(self.email_config['username'], self.email_config['password'])
            
            for email in participants_emails:
                # Tworzenie wiadomo≈õci
                msg = MIMEMultipart('alternative')
                msg['Subject'] = subject
                msg['From'] = f"{sender_name} <{self.email_config['username']}>"
                msg['To'] = email
                
                # Dodaj tre≈õƒá HTML
                html_part = MIMEText(notes_html, 'html', 'utf-8')
                msg.attach(html_part)
                
                # Wy≈õlij email
                server.send_message(msg)
                print(f"‚úÖ Wys≈Çano do: {email}")
            
            server.quit()
            print("‚úÖ Wszystkie notatki wys≈Çane")
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd wysy≈Çania email: {e}")

    def save_meeting_data(self, meeting_data: Dict, filename: str = None):
        """Zapisz dane spotkania do pliku JSON"""
        if not filename:
            filename = f"meeting_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(meeting_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ Dane spotkania zapisane: {filename}")
        return filename

# Przyk≈Çad u≈ºycia
def main():
    # Inicjalizacja - klucze bƒôdƒÖ pobrane z pliku .env
    summarizer = MeetingSummarizer()
    
    print("üéØ Meeting Summarizer - System transkrypcji i podsumowania spotka≈Ñ")
    print("=" * 60)
    
    # Opcja 1: Nagrywanie na ≈ºywo
    choice = input("Wybierz opcjƒô:\n1. Nagraj nowe spotkanie\n2. U≈ºyj istniejƒÖcy plik audio\nWyb√≥r (1/2): ")
    
    if choice == "1":
        # Nagrywanie spotkania
        duration = input("Podaj czas nagrywania w sekundach (Enter = rƒôczne zatrzymanie): ")
        duration = int(duration) if duration.isdigit() else None
        
        audio_file = summarizer.record_audio(duration=duration)
    else:
        # U≈ºyj istniejƒÖcy plik
        audio_file = input("Podaj ≈õcie≈ºkƒô do pliku audio: ")
    
    # Transkrypcja
    transcript = summarizer.transcribe_audio(audio_file)
    
    if not transcript:
        print("‚ùå Nie uda≈Ço siƒô utworzyƒá transkrypcji")
        return
    
    # Podsumowanie
    meeting_data = summarizer.summarize_meeting(transcript)
    meeting_data['transcript'] = transcript  # Dodaj transkrypcjƒô do danych
    
    # Zapisz dane
    json_file = summarizer.save_meeting_data(meeting_data)
    
    # Utw√≥rz notatki HTML
    meeting_title = input("Podaj tytu≈Ç spotkania (Enter = automatyczny): ") or None
    notes_html = summarizer.create_meeting_notes(meeting_data, meeting_title)
    
    # Zapisz notatki HTML
    html_filename = f"notatki_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
    with open(html_filename, 'w', encoding='utf-8') as f:
        f.write(notes_html)
    print(f"üìù Notatki HTML zapisane: {html_filename}")
    
    # Wysy≈Çanie emaili (opcjonalnie)
    send_emails = input("Czy chcesz wys≈Çaƒá notatki emailem? (t/n): ").lower() == 't'
    
    if send_emails and summarizer.email_config:
        emails_input = input("Podaj emaile uczestnik√≥w (oddziel przecinkami): ")
        participant_emails = [email.strip() for email in emails_input.split(',')]
        
        summarizer.send_email_notes(notes_html, participant_emails)
    
    print("\nüéâ Meeting Summarizer zako≈Ñczony!")
    print(f"üìÅ Pliki wygenerowane:")
    print(f"   - Audio: {audio_file}")
    print(f"   - Dane JSON: {json_file}")
    print(f"   - Notatki HTML: {html_filename}")

if __name__ == "__main__":
    main()